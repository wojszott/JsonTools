name: Update Version and Tag and Release

on:
  push:
    branches:
      - Basic-Utility
      - main

jobs:
  update-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install xpath (for parsing pom.xml)
        run: sudo apt-get install -y libxml-xpath-perl

      - name: Get current project version
        id: get-version
        run: |
          # Pobierz wersję projektu
          PROJECT_VERSION=$(xpath -q -e '/project/version/text()' pom.xml)
          echo "Current project version: $PROJECT_VERSION"
          
          # Dodaj trzeci segment (Z), jeśli brakuje (np. "0.1" → "0.1.0")
          if [[ "$PROJECT_VERSION" =~ ^[0-9]+\.[0-9]+$ ]]; then
            PROJECT_VERSION="$PROJECT_VERSION.0"
          fi
          
          echo "project_version=$PROJECT_VERSION" >> $GITHUB_ENV

      - name: Increment project version (X.Y.Z)
        id: increment-version
        run: |
          OLD_VERSION=$(echo "${{ env.project_version }}")
          IFS='.' read -r -a VERSION_PARTS <<< "$OLD_VERSION"
          
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Inkrementuj PATCH (Z)
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          
          echo "New project version: $NEW_VERSION"
          echo "new_project_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Debug version
        run: |
          echo "Current project version: ${{ env.project_version }}"
          echo "New project version: ${{ env.new_project_version }}"

      - name: Update pom.xml with new version
        run: |
          mvn versions:set -DnewVersion=${{ env.new_project_version }} -DgenerateBackupPoms=false
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pom.xml
          git commit -m "Update PROJECT version to ${{ env.new_project_version }}"

      - name: Pull latest changes
        run: |
          git pull --rebase origin main

      - name: Push changes
        run: |
          git push origin main

      - name: Create a new tag (vX.Y.Z)
        run: |
          git tag -a "v${{ env.new_project_version }}" -m "Release version ${{ env.new_project_version }}"
          git push origin "v${{ env.new_project_version }}"

      - name: Build application
        run: mvn clean package

      - name: Move artifact
        run: |
          mkdir -p artifacts
          cp target/*.jar artifacts/

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: spring-boot-app
          path: artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ env.new_project_version }}"
          name: "Release v${{ env.new_project_version }}"
          body: "Automatyczne wydanie wersji ${{ env.new_project_version }}"
          files: artifacts/*.jar
